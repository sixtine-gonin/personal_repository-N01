name: Chocolatine

on:
  push:
    branches-ignore:
      - "ga-ignore-*"
  pull_request:
    branches-ignore:
      - "ga-ignore-*"

env:
  MIRROR_URL: "git@github.com:EpitechPGEPromo2029/B-DOP-200-NCE-2-1-chocolatine-sixtine.gonin.git"
  EXECUTABLES: "exe"
  ARGUMENTS: ""

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check if Repository is a Mirror
        run: |
          if [ "${{ github.event.repository.is_mirror }}" = "true" ]; 
          then
            exit 1
          fi

  check_coding_style:
    needs: setup
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Run Coding Style Check
        run: check.sh $(pwd) $(pwd)

      - name: Annotate Coding Style Errors
        run: |
          if [ -f coding-style-reports.log ]; 
          then
            while IFS= read -r line; do
              file=${line%%:*}
              file=${line#*/}
              new_line=$line
              line_number=$(echo "$new_line" | cut -d':' -f2)
              error_number=${line##*:}
              error_type=$(echo "$line" | cut -d':' -f3)
              echo "::error file=${file},line=${line_number}::${error_type} - ${error_number}"
            done < coding-style-reports.log
          fi

      - name: Check for Coding Style Errors
        run: |
          error_count=$(wc -l < coding-style-reports.log)
          if [ "$error_count" -gt 0 ];
          then
            exit 1
          fi

  check_program_compilation:
    needs: check_coding_style
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Compile Code
        run: make re
        timeout-minutes: 3

      - name: Clean Compilation Files
        run: make clean

      - name: Verify Executables
        run: |
          echo "${{ env.EXECUTABLES }}" | while IFS=',' read -r -a executables; do
            for exe in "${executables[@]}"; do
                if [ ! -x "$exe" ]; then
                    echo "Error: $exe not found or not executable."
                    exit 1
                fi
            done
          done

  push_to_mirror:
    needs: check_program_compilation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Mirror Repository
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}